// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]

  bases         Base[]
}
model Base {
  id        String   @id @default(cuid())
  name      String
  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner     User     @relation(fields: [ownerId], references: [id])
  tables    Table[]
}
model Table {
  id        String   @id @default(cuid())
  name      String
  baseId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  base      Base     @relation(fields: [baseId], references: [id])
  fields    Field[]
  records   Record[]
  views     View[]
}

model Field {
  id      String @id @default(cuid())
  name    String
  type    String // "text" | "number"
  order   Int
  tableId String
  
  table   Table @relation(fields: [tableId], references: [id], onDelete: Cascade)
  cellValues CellValue[]
}

model Record {
  id        String   @id @default(cuid())
  tableId   String
  createdAt DateTime @default(now())
  
  table     Table @relation(fields: [tableId], references: [id], onDelete: Cascade)
  cellValues CellValue[]
}

model CellValue {
  id        String @id @default(cuid())
  recordId  String
  fieldId   String
  textValue String?
  numberValue Float?
  
  record    Record @relation(fields: [recordId], references: [id], onDelete: Cascade)
  field     Field  @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  
  @@unique([recordId, fieldId])
}

model View {
  id        String   @id @default(cuid())
  name      String
  tableId   String
  filters   String?  // JSON格式存储过滤条件
  sorts     String?  // JSON格式存储排序条件
  hiddenFields String? // JSON格式存储隐藏的字段ID列表
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
